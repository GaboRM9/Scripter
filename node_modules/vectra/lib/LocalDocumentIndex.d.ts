import { CreateIndexConfig, LocalIndex } from "./LocalIndex";
import { TextSplitterConfig } from "./TextSplitter";
import { MetadataFilter, EmbeddingsModel, Tokenizer, MetadataTypes, DocumentCatalogStats } from "./types";
import { LocalDocumentResult } from './LocalDocumentResult';
import { LocalDocument } from './LocalDocument';
export interface DocumentQueryOptions {
    maxDocuments?: number;
    maxChunks?: number;
    filter?: MetadataFilter;
}
export interface LocalDocumentIndexConfig {
    folderPath: string;
    embeddings?: EmbeddingsModel;
    tokenizer?: Tokenizer;
    chunkingConfig?: Partial<TextSplitterConfig>;
}
export declare class LocalDocumentIndex extends LocalIndex {
    private readonly _embeddings?;
    private readonly _tokenizer;
    private readonly _chunkingConfig?;
    private _catalog?;
    private _newCatalog?;
    constructor(config: LocalDocumentIndexConfig);
    /**
     * Returns true if the document catalog exists.
     */
    isCatalogCreated(): Promise<boolean>;
    getDocumentId(uri: string): Promise<string | undefined>;
    getDocumentUri(documentId: string): Promise<string | undefined>;
    createIndex(config?: CreateIndexConfig): Promise<void>;
    deleteDocument(uri: string): Promise<void>;
    getCatalogStats(): Promise<DocumentCatalogStats>;
    /**
     * Adds a document to the catalog.
     * @remarks
     * A new update is started if one is not already in progress. If an document with the same uri
     * already exists, it will be replaced.
     * @param uri - Document URI
     * @param text - Document text
     * @param docType - Optional. Document type
     * @param metadata - Optional. Document metadata to index
     * @returns Inserted document
     */
    upsertDocument(uri: string, text: string, docType?: string, metadata?: Record<string, MetadataTypes>): Promise<LocalDocument>;
    queryDocuments(query: string, options?: DocumentQueryOptions): Promise<LocalDocumentResult[]>;
    beginUpdate(): Promise<void>;
    cancelUpdate(): void;
    endUpdate(): Promise<void>;
    protected loadIndexData(): Promise<void>;
}
//# sourceMappingURL=LocalDocumentIndex.d.ts.map